# Prototype
snippet proto
	prototype.${1:method_name} = function(${2:first_argument}) {
	  ${3:// body...}
	};
# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
	  ${3:// body...}
	}
# Anonymous Function
snippet f
	function (${1}) {
	  ${3}
	}${2:;}
# Immediate function
snippet (f
	(function ( ${1} ) {
	  ${3:/* code */}
	}(${2}));
# if
snippet if
	if (${1:true}) {
	  ${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
	  ${2}
	} else {
	  ${3}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:things}.length; $2${3: += 1}) {
	  ${4:$1[$2]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3: -= 1}) {
	  ${4:$1[$2]}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
	  ${2:/* code */}
	}
# try
snippet try
	try {
	  ${1:/* code */}
	} catch (${2:e}) {
	  ${3:/* handle error */}
	}
# do...while
snippet do
	do {
	  ${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
	  ${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function () {${3}}${2}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# console.log (Firebug)
snippet cl
	console.log(${1});
# return
snippet ret
	return ${1:result}
# for (property in object ) { ... }
snippet fori
	for (var ${1:prop} in ${2:Things}) {
	  ${3:$2[$1]}
	}
# hasOwnProperty
snippet has
	hasOwnProperty( ${1} )
# docstring
snippet /**
	/**
	 * ${1:description}
	 */
snippet @par
	@param {${1:type}} ${2:name} ${3:description}
snippet @ret
	@return {${1:type}} ${2:description}
# JSON.parse
snippet jsonp
	JSON.parse(${1:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${1:object}, null, 2);
# self-defining function
snippet sdf
	var ${1:function_name} = function (${2:argument}) {
		${3:// initial code ...}

		$1 = function ($2) {
			${4:// main code}
		};
	}
# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};
		
		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${3:// code ...}

		return instance;
	}

# DOM createElement
snippet create
	var ${1:el} = document.createElement('${2:div}');

# require()
snippet req
	${1:module_name} = require('${2:module}');
# module.exports
snippet mod
	module.exports = ${1:module_name};
# restful
snippet restful
	// GET /
	index: function *(next) {
	},
	// GET /new
	new: function *(next) {
	},
	// POST /
	create: function *(next) {
	},
	// GET /:id
	show: function *(next) {
	},
	// GET /:id/edit
	edit: function *(next) {
	},
	// PUT /:id
	update: function *(next) {
	},
	// DELETE /:id
	destroy: function *(next) {
	}
# express.init
snippet express.init
	
	/**
	 * Module dependencies.
	 */
	var express = require('express');
	var http = require('http');
	var path = require('path');
	var app = module.exports = express();
	var server = http.createServer(app);
	var port = process.env.PORT || 3000;
	var env = app.get('env');

	// all environments
	app.set('views', __dirname + '/views');
	app.set('view engine', 'jade');
	app.use(express.favicon());
	app.use(express.logger('dev'));
	app.use(express.json());
	app.use(express.urlencoded());
	app.use(express.methodOverride());
	app.use(express.static(path.join(__dirname, 'public')));
	app.use(app.router);

	// development only
	if ('development' == env) {
	  app.use(express.errorHandler());
	}

	/**
	 * Mount
	 */
	
	app.use(${1});

	/**
	 * Listen
	 */

	server.listen(port, function() {
	  console.log('listening on port %s', port);
	});

	/**
	 * Graceful shutdown
	 */

	function shutdown() {
	  console.log('server: shutting down');
	  server.close(function(){
	    console.log('server: exiting');
	    setTimeout(function() {
		  process.exit();
	    }, 2000);
	  });
	}

	process.on('SIGTERM', shutdown);
	process.on('SIGQUIT', shutdown);

# koa.init
snippet koa.init
	/**
	 * Module dependencies
	 */

	var koa = require('koa');
	var app = koa();
	var http = require('http');
	var port = process.env.PORT || 3000;
	var serve = require('koa-static');
	var route = require('koa-route');
	var mount = require('koa-mount');
	var builder = require('mnml-build').middleware;

	/**
	 * Middlewares
	 */

	app.use(builder({copy: true, dev: true}));
	app.use(mount('/build', serve(__dirname + '/build')));

	/**
	 * Listen to port
	 */
	app.listen(port);
	
	console.log('App is running at PORT: %s', port);

# THREE.init
snippet THREE
	var THREE = require('three')
	var loop = require('raf-loop')
	var fitter = require('canvas-fit')
	var OrbitControl = require('three-orbit-controls')(THREE)

	module.exports = App;

	function App() {

	  this.scene = new THREE.Scene()
	  this.camera = this.getCamera()
	  this.canvas = document.createElement('canvas')
	  this.controls = new OrbitControl(this.camera, this.canvas)

	  this.fit = fitter(this.canvas)
	  this.fit.scale = window.devicePixelRatio || 1.0

	  this.renderer = new THREE.WebGLRenderer({
	    canvas: this.canvas
	  })

	  this.camera.position.set(0, 0, 10.0)
	  this.camera.lookAt(this.scene.position)

	  this.setupScene()

	  this.engine = loop()
	  this.engine.on('tick', this.render.bind(this))

	  window.addEventListener('resize', this.resize.bind(this), false)
	}

	App.prototype.getCamera = function() {
	  return new THREE.PerspectiveCamera()
	}

	App.prototype.setupScene = function() {

	  var geo = new THREE.BoxGeometry(1.0, 1.0, 1.0)
	  var mat = new THREE.MeshBasicMaterial({ color: 'white', wireframe: true })
	  var mesh = new THREE.Mesh(geo, mat)
	  this.mesh = mesh
	  this.scene.add(mesh)
	}

	App.prototype.start = function() {
	  this.engine.start()
	}

	App.prototype.render = function() {
	  this.renderer.render(this.scene, this.camera)
	}

	App.prototype.appendTo = function(p) {
	  p.appendChild(this.canvas)
	  this.resize()
	}

	App.prototype.resize = function() {
	  this.fit()
	  this.camera.aspect = this.canvas.width / this.canvas.height
		this.camera.updateProjectionMatrix();
	  this.renderer.setViewport(0, 0, this.canvas.width, this.canvas.height)
	}

snippet gsap
	require('gsap/src/uncompressed/plugins/CSSPlugin')
	require('gsap/src/uncompressed/easing/EasePack')
	var TimelineLite = require('gsap/src/uncompressed/TimelineLite')
	var TweenLite = require('gsap/src/uncompressed/TweenLite')

snippet easeInCubic
	cubic-bezier(0.550, 0.055, 0.675, 0.190)
snippet easeOutCubic
	cubic-bezier(0.215, 0.610, 0.355, 1.000)
snippet easeInOutCubic
	cubic-bezier(0.645, 0.045, 0.355, 1.000)
snippet easeInCirc
	cubic-bezier(0.600, 0.040, 0.980, 0.335)
snippet easeOutCirc
	cubic-bezier(0.075, 0.820, 0.165, 1.000)
snippet easeInOutCirc
	cubic-bezier(0.785, 0.135, 0.150, 0.860)
snippet easeInExpo
	cubic-bezier(0.950, 0.050, 0.795, 0.035)
snippet easeOutExpo
	cubic-bezier(0.190, 1.000, 0.220, 1.000)
snippet easeInOutExpo
	cubic-bezier(1.000, 0.000, 0.000, 1.000)
snippet easeInQuad
	cubic-bezier(0.550, 0.085, 0.680, 0.530)
snippet easeOutQuad
	cubic-bezier(0.250, 0.460, 0.450, 0.940)
snippet easeInOutQuad
	cubic-bezier(0.455, 0.030, 0.515, 0.955)
snippet easeInQuart
	cubic-bezier(0.895, 0.030, 0.685, 0.220)
snippet easeOutQuart
	cubic-bezier(0.165, 0.840, 0.440, 1.000)
snippet easeInOutQuart
	cubic-bezier(0.770, 0.000, 0.175, 1.000)
snippet easeInQuint
	cubic-bezier(0.755, 0.050, 0.855, 0.060)
snippet easeOutQuint
	cubic-bezier(0.230, 1.000, 0.320, 1.000)
snippet easeInOutQuint
	cubic-bezier(0.860, 0.000, 0.070, 1.000)
snippet easeInSine
	cubic-bezier(0.470, 0.000, 0.745, 0.715)
snippet easeOutSine
	cubic-bezier(0.390, 0.575, 0.565, 1.000)
snippet easeInOutSine
	cubic-bezier(0.445, 0.050, 0.550, 0.950)
snippet easeInBack
	cubic-bezier(0.600, -0.280, 0.735, 0.045)
snippet easeOutBack
	cubic-bezier(0.175,	0.885, 0.320, 1.275)
snippet easeInOutBack
	cubic-bezier(0.680, -0.550, 0.265, 1.550)

