# Prototype
snippet proto
	prototype.${1:method_name} = function(${2:first_argument}) {
	  ${3:// body...}
	};
# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
	  ${3:// body...}
	}
# Anonymous Function
snippet f
	function (${1}) {
	  ${3}
	}${2:;}
# Immediate function
snippet (f
	(function ( ${1} ) {
	  ${3:/* code */}
	}(${2}));
# if
snippet if
	if (${1:true}) {
	  ${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
	  ${2}
	} else {
	  ${3}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:things}.length; $2${3: += 1}) {
	  ${4:$1[$2]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3: -= 1}) {
	  ${4:$1[$2]}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
	  ${2:/* code */}
	}
# try
snippet try
	try {
	  ${1:/* code */}
	} catch (${2:e}) {
	  ${3:/* handle error */}
	}
# do...while
snippet do
	do {
	  ${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
	  ${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function () {${3}}${2}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# console.log (Firebug)
snippet cl
	console.log(${1});
# return
snippet ret
	return ${1:result}
# for (property in object ) { ... }
snippet fori
	for (var ${1:prop} in ${2:Things}) {
	  ${3:$2[$1]}
	}
# hasOwnProperty
snippet has
	hasOwnProperty( ${1} )
# docstring
snippet /**
	/**
	 * ${1:description}
	 */
snippet @par
	@param {${1:type}} ${2:name} ${3:description}
snippet @ret
	@return {${1:type}} ${2:description}
# JSON.parse
snippet jsonp
	JSON.parse(${1:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${1:object}, null, 2);
# self-defining function
snippet sdf
	var ${1:function_name} = function (${2:argument}) {
		${3:// initial code ...}

		$1 = function ($2) {
			${4:// main code}
		};
	}
# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};
		
		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${3:// code ...}

		return instance;
	}


# require()
snippet req
	${1:module_name} = require('${2:module}');
# module.exports
snippet mod
	module.exports = ${1:module_name};
# restful
snippet restful
	// GET /
	index: function *(next) {
	},
	// GET /new
	new: function *(next) {
	},
	// POST /
	create: function *(next) {
	},
	// GET /:id
	show: function *(next) {
	},
	// GET /:id/edit
	edit: function *(next) {
	},
	// PUT /:id
	update: function *(next) {
	},
	// DELETE /:id
	destroy: function *(next) {
	}
# express.init
snippet express.init
	
	/**
	 * Module dependencies.
	 */
	var express = require('express');
	var http = require('http');
	var path = require('path');
	var app = module.exports = express();
	var server = http.createServer(app);
	var port = process.env.PORT || 3000;
	var env = app.get('env');

	// all environments
	app.set('views', __dirname + '/views');
	app.set('view engine', 'jade');
	app.use(express.favicon());
	app.use(express.logger('dev'));
	app.use(express.json());
	app.use(express.urlencoded());
	app.use(express.methodOverride());
	app.use(express.static(path.join(__dirname, 'public')));
	app.use(app.router);

	// development only
	if ('development' == env) {
	  app.use(express.errorHandler());
	}

	/**
	 * Mount
	 */
	
	app.use(${1});

	/**
	 * Listen
	 */

	server.listen(port, function() {
	  console.log('listening on port %s', port);
	});

	/**
	 * Graceful shutdown
	 */

	function shutdown() {
	  console.log('server: shutting down');
	  server.close(function(){
	    console.log('server: exiting');
	    setTimeout(function() {
		  process.exit();
	    }, 2000);
	  });
	}

	process.on('SIGTERM', shutdown);
	process.on('SIGQUIT', shutdown);

# koa.init
snippet koa.init
	/**
	 * Module dependencies
	 */

	var koa = require('koa');
	var app = koa();
	var http = require('http');
	var port = process.env.PORT || 3000;
	var serve = require('koa-static');
	var route = require('koa-route');
	var mount = require('koa-mount');
	var builder = require('mnml-build').middleware;

	/**
	 * Middlewares
	 */

	app.use(builder({copy: true, dev: true}));
	app.use(mount('/build', serve(__dirname + '/build')));

	/**
	 * Listen to port
	 */
	app.listen(port);
	
	console.log('App is running at PORT: %s', port);

# THREE.init
snippet THREE.init

	function Boot() {

	  this.scene = new THREE.Scene();
	  this.light = new THREE.PointLight( 0xff0040, 8, 1000 );
	  this.light.position.set(300, 300, 300);

	  this.scene.add(this.light);

	  this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);
	  this.camera.position.z = 1000;

	  var geometry = new THREE.BoxGeometry(300, 300, 300);
	  var material = new THREE.MeshPhongMaterial(  { ambient: 0x555555, color: 0x555555, specular: 0xffffff, shininess: 10, shading: THREE.SmoothShading } );
	  this.mesh = new THREE.Mesh( geometry, material );
	  this.scene.add(this.mesh);

	  var sphereGeometry = new THREE.SphereGeometry( 10, 1, 1);
	  this.sphere = new THREE.Mesh(sphereGeometry, new THREE.MeshBasicMaterial({ color: 0xffffff, wireframe: true }));
	  this.scene.add(this.sphere);

	  this.renderer = new THREE.WebGLRenderer();
	  this.renderer.setSize(window.innerWidth, window.innerHeight);

	  document.body.appendChild(this.renderer.domElement);
	  
	  this.animate = this.animate.bind(this);
	  this.animate();
	}

	Boot.prototype.animate = function() {

	  // note: three.js includes requestAnimationFrame shim
	  requestAnimationFrame( this.animate );
	  if(t) {
		this.light.position.x += 1.0 * Math.cos(t / 1000);
		this.light.position.y += 2.0 * Math.sin(t / 1000);
		this.light.position.z += 2.0 * Math.cos(t / 1000);
		this.sphere.position.x = this.light.position.x;
		this.sphere.position.y = this.light.position.y;
		this.sphere.position.z = this.light.position.z;
	  }
	  this.mesh.rotation.x += 0.01;
	  this.mesh.rotation.y += 0.02;
	  this.renderer.render(this.scene, this.camera);
	}
